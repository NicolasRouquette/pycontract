test1 (test.test10_many_locks.test10.Test1.test1) ... ok
test1 (test.test10_many_locks.test10.Test2.test1) ... 

Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test10_many_locks/test10.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test10_many_locks/test10.AcquireRelease.png

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_39')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_2')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_469')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_417')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_375')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_76')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_27')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_149')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_43')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_408')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_403')[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_38')[0m

================
Analysis result:
================

12 messages!

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_39')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_2')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_469')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_417')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_375')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_76')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_27')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_149')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_43')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_408')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_403')[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state DoRelease('LOCK_38')[0m
ok
test1 (test.test11_visualization.test11.Test1.test1) ... ok
test1 (test.test12_vpt_2022.test12.Test1.test1) ... ok
test1 (test.test12_vpt_2022.test12.Test2.test1) ... 
Execution time: 0:00:00.395215
["[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_39')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_2')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_469')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_417')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_375')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_76')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_27')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_149')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_43')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_408')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_403')", "[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state DoRelease('LOCK_38')"]


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test11_visualization/test11.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test11_visualization/test11.Auction.png


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test12_vpt_2022/test12.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test12_vpt_2022/test12.M4.png
---------------------> 1000
---------------------> 2000
---------------------> 3000
---------------------> 4000
---------------------> 5000
---------------------> 6000
---------------------> 7000
---------------------> 8000
---------------------> 9000
---------------------> 10000
---------------------> 11000
---------------------> 12000
---------------------> 13000
---------------------> 14000
---------------------> 15000
---------------------> 16000
---------------------> 17000
---------------------> 18000
---------------------> 19000
---------------------> 20000
---------------------> 21000
---------------------> 22000
---------------------> 23000
---------------------> 24000
---------------------> 25000
---------------------> 26000
---------------------> 27000
---------------------> 28000
---------------------> 29000
---------------------> 30000
---------------------> 31000
---------------------> 32000
---------------------> 33000
---------------------> 34000
---------------------> 35000
---------------------> 36000
---------------------> 37000
---------------------> 38000
---------------------> 39000
---------------------> 40000
---------------------> 41000
---------------------> 42000
---------------------> 43000
---------------------> 44000
---------------------> 45000
---------------------> 46000
---------------------> 47000
---------------------> 48000
---------------------> 49000
---------------------> 50000
---------------------> 51000
---------------------> 52000
---------------------> 53000
---------------------> 54000
---------------------> 55000
---------------------> 56000
---------------------> 57000
---------------------> 58000
---------------------> 59000
---------------------> 60000
---------------------> 61000
---------------------> 62000
---------------------> 63000
---------------------> 64000
---------------------> 65000
---------------------> 66000
---------------------> 67000
---------------------> 68000
---------------------> 69000
---------------------> 70000
---------------------> 71000
---------------------> 72000
---------------------> 73000
---------------------> 74000
---------------------> 75000
---------------------> 76000
---------------------> 77000
---------------------> 78000
---------------------> 79000
---------------------> 80000
---------------------> 81000
---------------------> 82000
---------------------> 83000
---------------------> 84000
---------------------> 85000
---------------------> 86000
---------------------> 87000
---------------------> 88000
---------------------> 89000
---------------------> 90000
---------------------> 91000
---------------------> 92000
---------------------> 93000
---------------------> 94000
---------------------> 95000
---------------------> 96000
---------------------> 97000
---------------------> 98000
---------------------> 99000
---------------------> 100000
---------------------> 101000
---------------------> 102000
---------------------> 103000
---------------------> 104000
---------------------> 105000
---------------------> 106000
---------------------> 107000
---------------------> 108000
---------------------> 109000
---------------------> 110000
---------------------> 111000
---------------------> 112000
---------------------> 113000
---------------------> 114000
---------------------> 115000
---------------------> 116000
---------------------> 117000
---------------------> 118000
---------------------> 119000
---------------------> 120000
---------------------> 121000
---------------------> 122000
---------------------> 123000
---------------------> 124000
---------------------> 125000
---------------------> 126000
---------------------> 127000
---------------------> 128000
---------------------> 129000
---------------------> 130000
---------------------> 131000
---------------------> 132000
---------------------> 133000
---------------------> 134000
---------------------> 135000
---------------------> 136000
---------------------> 137000
---------------------> 138000
---------------------> 139000
---------------------> 140000
---------------------> 141000
---------------------> 142000
---------------------> 143000
---------------------> 144000
---------------------> 145000
---------------------> 146000
---------------------> 147000
---------------------> 148000
---------------------> 149000
---------------------> 150000
---------------------> 151000
---------------------> 152000
---------------------> 153000
---------------------> 154000
---------------------> 155000
---------------------> 156000
---------------------> 157000
---------------------> 158000
---------------------> 159000
---------------------> 160000
---------------------> 161000
---------------------> 162000
---------------------> 163000
---------------------> 164000
---------------------> 165000
---------------------> 166000
---------------------> 167000
---------------------> 168000
---------------------> 169000
---------------------> 170000
---------------------> 171000
---------------------> 172000
---------------------> 173000
---------------------> 174000
---------------------> 175000
---------------------> 176000
---------------------> 177000
---------------------> 178000
---------------------> 179000
---------------------> 180000
---------------------> 181000
---------------------> 182000
---------------------> 183000
---------------------> 184000
---------------------> 185000
---------------------> 186000
---------------------> 187000
---------------------> 188000
---------------------> 189000
---------------------> 190000
---------------------> 191000
---------------------> 192000
---------------------> 193000
---------------------> 194000
---------------------> 195000
---------------------> 196000
---------------------> 197000
---------------------> 198000
---------------------> 199000
---------------------> 200000
---------------------> 201000
---------------------> 202000
---------------------> 203000
---------------------> 204000
---------------------> 205000
---------------------> 206000
---------------------> 207000
---------------------> 208000
---------------------> 209000
---------------------> 210000
---------------------> 211000
---------------------> 212000
---------------------> 213000
---------------------> 214000
---------------------> 215000
---------------------> 216000
---------------------> 217000
---------------------> 218000
---------------------> 219000
---------------------> 220000
---------------------> 221000
---------------------> 222000
---------------------> 223000
---------------------> 224000
---------------------> 225000
---------------------> 226000
---------------------> 227000
---------------------> 228000
---------------------> 229000
---------------------> 230000
---------------------> 231000
---------------------> 232000
---------------------> 233000
---------------------> 234000
---------------------> 235000
---------------------> 236000
---------------------> 237000
---------------------> 238000
---------------------> 239000
---------------------> 240000
---------------------> 241000
---------------------> 242000
---------------------> 243000
---------------------> 244000
---------------------> 245000
---------------------> 246000
---------------------> 247000
---------------------> 248000
---------------------> 249000
---------------------> 250000
---------------------> 251000
---------------------> 252000
---------------------> 253000
---------------------> 254000
---------------------> 255000
---------------------> 256000
---------------------> 257000
---------------------> 258000
---------------------> 259000
---------------------> 260000
---------------------> 261000
---------------------> 262000
---------------------> 263000
---------------------> 264000
---------------------> 265000
---------------------> 266000
---------------------> 267000
---------------------> 268000
---------------------> 269000
---------------------> 270000
---------------------> 271000
---------------------> 272000
---------------------> 273000
---------------------> 274000
---------------------> 275000
---------------------> 276000
---------------------> 277000
---------------------> 278000
---------------------> 279000
---------------------> 280000
---------------------> 281000
---------------------> 282000
---------------------> 283000
---------------------> 284000
---------------------> 285000
---------------------> 286000
---------------------> 287000
---------------------> 288000
---------------------> 289000
---------------------> 290000
---------------------> 291000
---------------------> 292000
---------------------> 293000
---------------------> 294000
---------------------> 295000
---------------------> 296000
---------------------> 297000
---------------------> 298000
---------------------> 299000
---------------------> 300000
---------------------> 301000
---------------------> 302000
---------------------> 303000
---------------------> 304000
---------------------> 305000
---------------------> 306000
---------------------> 307000
---------------------> 308000
---------------------> 309000
---------------------> 310000
---------------------> 311000
---------------------> 312000
---------------------> 313000
---------------------> 314000
---------------------> 315000
---------------------> 316000
---------------------> 317000
---------------------> 318000
---------------------> 319000
---------------------> 320000
---------------------> 321000
---------------------> 322000
---------------------> 323000
---------------------> 324000
---------------------> 325000
---------------------> 326000
---------------------> 327000
---------------------> 328000
---------------------> 329000
---------------------> 330000
---------------------> 331000
---------------------> 332000
---------------------> 333000
---------------------> 334000
---------------------> 335000
---------------------> 336000
---------------------> 337000
---------------------> 338000
---------------------> 339000
---------------------> 340000
---------------------> 341000
---------------------> 342000
---------------------> 343000
---------------------> 344000
---------------------> 345000
---------------------> 346000
---------------------> 347000
---------------------> 348000
---------------------> 349000
---------------------> 350000
---------------------> 351000
---------------------> 352000
---------------------> 353000
---------------------> 354000
---------------------> 355000
---------------------> 356000
---------------------> 357000
---------------------> 358000
---------------------> 359000
---------------------> 360000
---------------------> 361000
---------------------> 362000
---------------------> 363000
---------------------> 364000
---------------------> 365000
---------------------> 366000
---------------------> 367000
---------------------> 368000
---------------------> 369000
---------------------> 370000
---------------------> 371000
---------------------> 372000
---------------------> 373000
---------------------> 374000
---------------------> 375000
---------------------> 376000
---------------------> 377000
---------------------> 378000
---------------------> 379000
---------------------> 380000
---------------------> 381000
---------------------> 382000
---------------------> 383000
---------------------> 384000
---------------------> 385000
---------------------> 386000
---------------------> 387000
---------------------> 388000
---------------------> 389000
---------------------> 390000
---------------------> 391000
---------------------> 392000
---------------------> 393000
---------------------> 394000
---------------------> 395000
---------------------> 396000
---------------------> 397000
---------------------> 398000
---------------------> 399000
---------------------> 400000
---------------------> 401000
---------------------> 402000
---------------------> 403000
---------------------> 404000
---------------------> 405000
---------------------> 406000
---------------------> 407000
---------------------> 408000
---------------------> 409000
---------------------> 410000
---------------------> 411000
---------------------> 412000
---------------------> 413000
---------------------> 414000
---------------------> 415000
---------------------> 416000
---------------------> 417000
---------------------> 418000
---------------------> 419000
---------------------> 420000
---------------------> 421000
---------------------> 422000
---------------------> 423000
---------------------> 424000
---------------------> 425000
---------------------> 426000
---------------------> 427000
---------------------> 428000
---------------------> 429000
---------------------> 430000
---------------------> 431000
---------------------> 432000
---------------------> 433000
---------------------> 434000
---------------------> 435000
---------------------> 436000
---------------------> 437000
---------------------> 438000
---------------------> 439000
---------------------> 440000
---------------------> 441000
---------------------> 442000
---------------------> 443000
---------------------> 444000
---------------------> 445000
---------------------> 446000
---------------------> 447000
---------------------> 448000
---------------------> 449000
---------------------> 450000
---------------------> 451000
---------------------> 452000
---------------------> 453000
---------------------> 454000
---------------------> 455000
---------------------> 456000
---------------------> 457000
---------------------> 458000
---------------------> 459000
---------------------> 460000
---------------------> 461000
---------------------> 462000
---------------------> 463000
---------------------> 464000
---------------------> 465000
---------------------> 466000
---------------------> 467000
---------------------> 468000
---------------------> 469000
---------------------> 470000
---------------------> 471000
---------------------> 472000
---------------------> 473000
---------------------> 474000
---------------------> 475000
---------------------> 476000
---------------------> 477000
---------------------> 478000
---------------------> 479000
---------------------> 480000
---------------------> 481000
---------------------> 482000
---------------------> 483000
---------------------> 484000
---------------------> 485000
---------------------> 486000
---------------------> 487000
---------------------> 488000
---------------------> 489000
---------------------> 490000
---------------------> 491000
---------------------> 492000
---------------------> 493000
---------------------> 494000
---------------------> 495000
---------------------> 496000
---------------------> 497000
---------------------> 498000
---------------------> 499000
---------------------> 500000

Terminating monitoring!

++++++++++++++++++++++
Terminating monitor M4
++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test1 (test.test13_insertable.test13.Test1.test1) ... ok
test1 (test.test13_insertable.test13.Test2.test1) ... 
Execution time: 0:00:03.200441



Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test13_insertable/test13.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test13_insertable/test13.NextMonitor.png
- /Users/khavelun/CascadeProjects/pycontract_project/test/test13_insertable/test13.InsertableDevice.png
=====================================================================================
Event 1 {'type': 'notification', 'name': 'InsertionStateChanged', 'arg': 'Retracted'}
=====================================================================================

########################
Monitor InsertableDevice
########################

Unknown() results in [Retracted()]

------------------------
InsertableDevice states:
Retracted()

------------------------
=====================================================
Event 2 {'type': 'command', 'name': 'WaitForRetract'}
=====================================================

########################
Monitor InsertableDevice
########################

Retracted() results in [Retracted(),  NextStep()]

------------------------
InsertableDevice states:
Retracted()
NextStep()

------------------------
==================================================
Event 3 {'type': 'command', 'name': 'BeginInsert'}
==================================================

########################
Monitor InsertableDevice
########################

Retracted() results in [Next:
  {'type': 'notification', 'name': 'InsertionStateChanged', 'arg': 'Inserting'} -> Inserting()
  {'type': 'exception', 'message': 'BeginInsert_failed'} -> Unknown()
]
NextStep() results in [OkState()]

------------------------
InsertableDevice states:
Next:
  {'type': 'notification', 'name': 'InsertionStateChanged', 'arg': 'Inserting'} -> Inserting()
  {'type': 'exception', 'message': 'BeginInsert_failed'} -> Unknown()

------------------------
=====================================================================================
Event 4 {'type': 'notification', 'name': 'InsertionStateChanged', 'arg': 'Inserting'}
=====================================================================================

########################
Monitor InsertableDevice
########################

Next:
  {'type': 'notification', 'name': 'InsertionStateChanged', 'arg': 'Inserting'} -> Inserting()
  {'type': 'exception', 'message': 'BeginInsert_failed'} -> Unknown()
 results in [Inserting()]

------------------------
InsertableDevice states:
Inserting()

------------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++++
Terminating monitor InsertableDevice
++++++++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test1 (test.test1_locks_slicing.test1.Test1.test1) ... ok
test1 (test.test1_locks_slicing.test1.Test2.test1) ... []


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test1_locks_slicing/test1.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test1_locks_slicing/test1.LockMonitor.png
- /Users/khavelun/CascadeProjects/pycontract_project/test/test1_locks_slicing/test1.AcquireRelease.png
=================================
Event 1 Acquire(task=1, lock=100)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
index 100:
  Acquired(1, 100) (HOT)
----------------------
=================================
Event 2 Acquire(task=1, lock=200)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200)]

----------------------
AcquireRelease states:
Start()
index 100:
  Acquired(1, 100) (HOT)
index 200:
  Acquired(1, 200) (HOT)
----------------------
=================================
Event 3 Acquire(task=2, lock=300)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(2, 300)]

----------------------
AcquireRelease states:
Start()
index 100:
  Acquired(1, 100) (HOT)
index 200:
  Acquired(1, 200) (HOT)
index 300:
  Acquired(2, 300) (HOT)
----------------------
=================================
Event 4 Release(task=1, lock=100)
=================================

######################
Monitor AcquireRelease
######################

Acquired(1, 100) results in [OkState()]

----------------------
AcquireRelease states:
Start()
index 200:
  Acquired(1, 200) (HOT)
index 300:
  Acquired(2, 300) (HOT)
----------------------
=================================
Event 5 Release(task=1, lock=200)
=================================

######################
Monitor AcquireRelease
######################

Acquired(1, 200) results in [OkState()]

----------------------
AcquireRelease states:
Start()
index 300:
  Acquired(2, 300) (HOT)
----------------------
=================================
Event 6 Release(task=2, lock=300)
=================================

######################
Monitor AcquireRelease
######################

Acquired(2, 300) results in [OkState()]

----------------------
AcquireRelease states:
Start()

----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test1_locks_slicing.test1.Test2.test2) ... =================================
Event 1 Acquire(task=1, lock=100)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
index 100:
  Acquired(1, 100) (HOT)
----------------------
=================================
Event 2 Acquire(task=1, lock=200)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200)]

----------------------
AcquireRelease states:
Start()
index 100:
  Acquired(1, 100) (HOT)
index 200:
  Acquired(1, 200) (HOT)
----------------------
=================================
Event 3 Acquire(task=2, lock=100)
=================================

######################
Monitor AcquireRelease
######################

Acquired(1, 100) results in [ErrorState(P100 acquired again)]
*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 Acquire(task=2, lock=100)
    P100 acquired again

----------------------
AcquireRelease states:
Start()
index 200:
  Acquired(1, 200) (HOT)
----------------------
=================================
Event 4 Release(task=1, lock=100)
=================================

######################
Monitor AcquireRelease
######################


----------------------
AcquireRelease states:
Start()
index 200:
  Acquired(1, 200) (HOT)
----------------------
=================================
Event 5 Acquire(task=2, lock=300)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(2, 300)]

----------------------
AcquireRelease states:
Start()
index 200:
  Acquired(1, 200) (HOT)
index 300:
  Acquired(2, 300) (HOT)
----------------------
=================================
Event 6 Release(task=2, lock=400)
=================================

######################
Monitor AcquireRelease
######################

Start() results in [Start()]

----------------------
AcquireRelease states:
Start()
index 200:
  Acquired(1, 200) (HOT)
index 300:
  Acquired(2, 300) (HOT)
index 400:
  Start()
----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(1, 200)[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m

================
Analysis result:
================

3 messages!

*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 Acquire(task=2, lock=100)
    P100 acquired again

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(1, 200)[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m
ok
test1 (test.test23_orstate.test23.TestOrAndState.test1)
Test OrState where the first branch succeeds and becomes ok. ... ============
Event 1 E1()
============

###############
Monitor Monitor
###############

OrState() results in [OkState()]

---------------
Monitor states:


---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test23_orstate.test23.TestOrAndState.test2)
Test OrState where the second branch succeeds and moves to a new state. ... ============
Event 1 E2()
============

###############
Monitor Monitor
###############

OrState() results in [OrState()]

---------------
Monitor states:
OrState()
  S1()
  S4()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test3 (test.test23_orstate.test23.TestOrAndState.test3)
Test OrState ignores a branch with an error and tries the next. ... ok
test4 (test.test23_orstate.test23.TestOrAndState.test4)
Test OrState fails when no branch can handle the event. ... ============
Event 1 E3()
============

###############
Monitor Monitor
###############

OrState() results in [S1()]

---------------
Monitor states:
S1()

---------------
============
Event 1 E3()
============

###############
Monitor Monitor
###############

OrState() results in [OrState()]

---------------
Monitor states:
OrState()
  S1()
  S2()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test5 (test.test23_orstate.test23.TestOrAndState.test5)
Test AndState where branches transition to new states. ... ============
Event 1 E1()
============

###############
Monitor Monitor
###############

AndState() results in [S2()]

---------------
Monitor states:
S2()

---------------
============
Event 2 E2()
============

###############
Monitor Monitor
###############

S2() results in [S4()]

---------------
Monitor states:
S4()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test6 (test.test23_orstate.test23.TestOrAndState.test6)
Test AndState where all branches resolve to ok. ... ============
Event 1 E1()
============

###############
Monitor Monitor
###############

AndState() results in [S2Ok()]

---------------
Monitor states:
S2Ok()

---------------
============
Event 2 E2()
============

###############
Monitor Monitor
###############

S2Ok() results in [OkState()]

---------------
Monitor states:


---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test7 (test.test23_orstate.test23.TestOrAndState.test7)
Test AndState fails immediately if any branch has an error. ... ============
Event 1 E3()
============

###############
Monitor Monitor
###############

AndState() results in [ErrorState(AndState failed.)]
*** error transition in Monitor:
    state AndState()
    event 1 E3()
    AndState failed.

---------------
Monitor states:


---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++


================
Analysis result:
================

1 messages!

*** error transition in Monitor:
    state AndState()
    event 1 E3()
    AndState failed.
ok
test8 (test.test23_orstate.test23.TestOrAndState.test8)
Test that end() finds a HotState nested in an AndState. ... 
Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Monitor
+++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in Monitor:
    terminates in hot state MyHotState()[0m

================
Analysis result:
================

1 messages!

[95m[HOT STATE] *** error at end in Monitor:
    terminates in hot state MyHotState()[0m
ok
test1 (test.test24_orstate.test24.TestOrStateIntegration.test1)
Tests that the monitor correctly reports hot state errors at the end. ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 D(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 E(x=2)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m
[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_NotF_E(1)[0m

================
Analysis result:
================

2 messages!

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_NotF_E(1)[0m
ok
test2 (test.test24_orstate.test24.TestOrStateIntegration.test2)
Tests that the monitor correctly reports an error during a transition. ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 D(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 F(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [Expect_B_NotD_C(1)]
Always() results in [Always()]

-----------------
OrMonitor states:
Expect_B_NotD_C(1) (HOT)
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m

================
Analysis result:
================

1 messages!

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m
ok
test3 (test.test24_orstate.test24.TestOrStateIntegration.test3)
Tests a successful trace that satisfies the first branch of the OrState. ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 B(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 C(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OkState()]
Always() results in [Always()]

-----------------
OrMonitor states:
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test4 (test.test24_orstate.test24.TestOrStateIntegration.test4)
Tests a successful trace that satisfies the second branch of the OrState. ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 D(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 E(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OkState()]
Always() results in [Always()]

-----------------
OrMonitor states:
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test5 (test.test24_orstate.test24.TestOrStateIntegration.test5)
Tests a trace where both branches of the OrState progress initially, ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 B(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 D(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [Expect_NotF_E(1)]
Always() results in [Always()]

-----------------
OrMonitor states:
Expect_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 4 E(x=1)
==============

#################
Monitor OrMonitor
#################

Expect_NotF_E(1) results in [OkState()]
Always() results in [Always()]

-----------------
OrMonitor states:
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test1 (test.test25_various.test25.TestNotState.test1)
Tests that NotState returns ok when its inner state returns an error. ... ===========
Event 1 G()
===========

##################
Monitor NotMonitor
##################

Start() results in [NotState(Inner())]

------------------
NotMonitor states:
NotState(Inner())
  Inner() (HOT)

------------------
===========
Event 2 I()
===========

##################
Monitor NotMonitor
##################

NotState(Inner()) results in [OkState()]

------------------
NotMonitor states:


------------------

Terminating monitoring!

++++++++++++++++++++++++++++++
Terminating monitor NotMonitor
++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test25_various.test25.TestNotState.test2)
Tests that NotState returns an error when its inner state returns ok. ... ===========
Event 1 G()
===========

##################
Monitor NotMonitor
##################

Start() results in [NotState(Inner())]

------------------
NotMonitor states:
NotState(Inner())
  Inner() (HOT)

------------------
===========
Event 2 H()
===========

##################
Monitor NotMonitor
##################

NotState(Inner()) results in [ErrorState(NotState: inner state succeeded where it should have failed)]
*** error transition in NotMonitor:
    state NotState(Inner())
    event 2 H()
    NotState: inner state succeeded where it should have failed

------------------
NotMonitor states:


------------------

Terminating monitoring!

++++++++++++++++++++++++++++++
Terminating monitor NotMonitor
++++++++++++++++++++++++++++++


================
Analysis result:
================

1 messages!

*** error transition in NotMonitor:
    state NotState(Inner())
    event 2 H()
    NotState: inner state succeeded where it should have failed
ok
test3 (test.test25_various.test25.TestNotState.test3)
Tests that NotState correctly handles an implicit AndState. ... ===========
Event 1 G()
===========

##################
Monitor NotMonitor
##################

NotState(AndBranch()) results in [NotState(AndState())]

------------------
NotMonitor states:
NotState(AndState())
  AndState()
    Branch1()
    Branch2()

------------------
===========
Event 2 I()
===========

##################
Monitor NotMonitor
##################

NotState(AndState()) results in [OkState()]

------------------
NotMonitor states:


------------------

Terminating monitoring!

++++++++++++++++++++++++++++++
Terminating monitor NotMonitor
++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
===========
Event 1 G()
===========

##################
Monitor NotMonitor
##################

NotState(AndBranch()) results in [NotState(AndState())]

------------------
NotMonitor states:
NotState(AndState())
  AndState()
    Branch1()
    Branch2()

------------------
===========
Event 2 H()
===========

##################
Monitor NotMonitor
##################

NotState(AndState()) results in [ErrorState(NotState: inner state succeeded where it should have failed)]
*** error transition in NotMonitor:
    state NotState(AndState())
    event 2 H()
    NotState: inner state succeeded where it should have failed

------------------
NotMonitor states:


------------------

Terminating monitoring!

++++++++++++++++++++++++++++++
Terminating monitor NotMonitor
++++++++++++++++++++++++++++++


================
Analysis result:
================

1 messages!

*** error transition in NotMonitor:
    state NotState(AndState())
    event 2 H()
    NotState: inner state succeeded where it should have failed
ok
test1 (test.test25_various.test25.TestVarious.test1)
Tests that the monitor correctly reports hot state errors at the end. ... ==============
Event 1 A(x=1)
==============

#################
Monitor OrMonitor
#################

Always() results in [OrState(),  Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_D_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 2 D(x=1)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------
==============
Event 3 E(x=2)
==============

#################
Monitor OrMonitor
#################

OrState() results in [OrState()]
Always() results in [Always()]

-----------------
OrMonitor states:
OrState()
  Expect_B_NotD_C(1) (HOT)
  Expect_NotF_E(1) (HOT)
Always()

-----------------

Terminating monitoring!

+++++++++++++++++++++++++++++
Terminating monitor OrMonitor
+++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m
[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_NotF_E(1)[0m

================
Analysis result:
================

2 messages!

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_B_NotD_C(1)[0m

[95m[HOT STATE] *** error at end in OrMonitor:
    terminates in hot state Expect_NotF_E(1)[0m
ok
test1 (test.test2_locks_dicts.test2.Test1.test1) ... ok
test1 (test.test2_locks_dicts.test2.Test2.test1) ... 

Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test2_locks_dicts/test2.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test2_locks_dicts/test2.AcquireRelease.png
================================================================
Event 1 LockEvent(name='acquire', dict={'task': 1, 'lock': 100})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100),  Start()]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
================================================================
Event 2 LockEvent(name='acquire', dict={'task': 1, 'lock': 200})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200),  Start()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 200) (HOT)
Acquired(1, 100) (HOT)

----------------------
================================================================
Event 3 LockEvent(name='release', dict={'task': 1, 'lock': 200})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Start()]
Acquired(1, 200) results in [OkState()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
================================================================
Event 4 LockEvent(name='release', dict={'task': 1, 'lock': 100})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Start()]
Acquired(1, 100) results in [OkState()]

----------------------
AcquireRelease states:
Start()

----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test2_locks_dicts.test2.Test2.test2) ... ================================================================
Event 1 LockEvent(name='acquire', dict={'task': 1, 'lock': 100})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100),  Start()]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
================================================================
Event 2 LockEvent(name='acquire', dict={'task': 1, 'lock': 200})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200),  Start()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 200) (HOT)
Acquired(1, 100) (HOT)

----------------------
================================================================
Event 3 LockEvent(name='acquire', dict={'task': 2, 'lock': 100})
================================================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(2, 100),  Start()]
Acquired(1, 200) results in [Acquired(1, 200)]
Acquired(1, 100) results in [ErrorState(P100 acquired again)]
*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 LockEvent(name='acquire', dict={'task': 2, 'lock': 100})
    P100 acquired again

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()
Acquired(1, 200) (HOT)

----------------------
================================================================
Event 4 LockEvent(name='release', dict={'task': 1, 'lock': 200})
================================================================

######################
Monitor AcquireRelease
######################

Acquired(2, 100) results in [Acquired(2, 100)]
Start() results in [Start()]
Acquired(1, 200) results in [OkState()]

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()

----------------------
================================================================
Event 5 LockEvent(name='acquire', dict={'task': 2, 'lock': 300})
================================================================

######################
Monitor AcquireRelease
######################

Acquired(2, 100) results in [Acquired(2, 100)]
Start() results in [Acquired(2, 300),  Start()]

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()
Acquired(2, 300) (HOT)

----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 100)[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m

================
Analysis result:
================

3 messages!

*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 LockEvent(name='acquire', dict={'task': 2, 'lock': 100})
    P100 acquired again

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 100)[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m
ok
test1 (test.test3_locks_dicts_mixed.test3.Test1.test1) ... ok
test1 (test.test3_locks_dicts_mixed.test3.Test2.test1) ... ["*** error transition in AcquireRelease:\n    state Acquired(1, 100)\n    event 3 LockEvent(name='acquire', dict={'task': 2, 'lock': 100})\n    P100 acquired again", '[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state Acquired(2, 100)', '[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state Acquired(2, 300)']


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test3_locks_dicts_mixed/test3.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test3_locks_dicts_mixed/test3.AcquireRelease.png
==============================================
Event 1 Acquire(data={'task': 1, 'lock': 100})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100),  Start()]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
==============================================
Event 2 Acquire(data={'task': 1, 'lock': 200})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200),  Start()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 200) (HOT)
Acquired(1, 100) (HOT)

----------------------
==============================================
Event 3 Release(data={'task': 1, 'lock': 200})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Start()]
Acquired(1, 200) results in [OkState()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
==============================================
Event 4 Release(data={'task': 1, 'lock': 100})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Start()]
Acquired(1, 100) results in [OkState()]

----------------------
AcquireRelease states:
Start()

----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test3_locks_dicts_mixed.test3.Test2.test2) ... ==============================================
Event 1 Acquire(data={'task': 1, 'lock': 100})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 100),  Start()]

----------------------
AcquireRelease states:
Start()
Acquired(1, 100) (HOT)

----------------------
==============================================
Event 2 Acquire(data={'task': 1, 'lock': 200})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(1, 200),  Start()]
Acquired(1, 100) results in [Acquired(1, 100)]

----------------------
AcquireRelease states:
Start()
Acquired(1, 200) (HOT)
Acquired(1, 100) (HOT)

----------------------
==============================================
Event 3 Acquire(data={'task': 2, 'lock': 100})
==============================================

######################
Monitor AcquireRelease
######################

Start() results in [Acquired(2, 100),  Start()]
Acquired(1, 200) results in [Acquired(1, 200)]
Acquired(1, 100) results in [ErrorState(P100 acquired again)]
*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 Acquire(data={'task': 2, 'lock': 100})
    P100 acquired again

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()
Acquired(1, 200) (HOT)

----------------------
==============================================
Event 4 Release(data={'task': 1, 'lock': 200})
==============================================

######################
Monitor AcquireRelease
######################

Acquired(2, 100) results in [Acquired(2, 100)]
Start() results in [Start()]
Acquired(1, 200) results in [OkState()]

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()

----------------------
==============================================
Event 5 Acquire(data={'task': 2, 'lock': 300})
==============================================

######################
Monitor AcquireRelease
######################

Acquired(2, 100) results in [Acquired(2, 100)]
Start() results in [Acquired(2, 300),  Start()]

----------------------
AcquireRelease states:
Acquired(2, 100) (HOT)
Start()
Acquired(2, 300) (HOT)

----------------------

Terminating monitoring!

++++++++++++++++++++++++++++++++++
Terminating monitor AcquireRelease
++++++++++++++++++++++++++++++++++

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 100)[0m
[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m

================
Analysis result:
================

3 messages!

*** error transition in AcquireRelease:
    state Acquired(1, 100)
    event 3 Acquire(data={'task': 2, 'lock': 100})
    P100 acquired again

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 100)[0m

[95m[HOT STATE] *** error at end in AcquireRelease:
    terminates in hot state Acquired(2, 300)[0m
ok
test1 (test.test4_auction.test4.Test1.test1) ... ok
test1 (test.test4_auction.test4.Test2.test1) ... ["*** error transition in AcquireRelease:\n    state Acquired(1, 100)\n    event 3 Acquire(data={'task': 2, 'lock': 100})\n    P100 acquired again", '[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state Acquired(2, 100)', '[HOT STATE] *** error at end in AcquireRelease:\n    terminates in hot state Acquired(2, 300)']


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test4_auction/test4.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test4_auction/test4.Auction.png
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=60)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [Listed('Hat', 50, 60)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=6000)
====================================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [Listed('Hat', 50, 60)]
Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [OkState()]
Always() results in [Always()]
Listed('Car', 5000, 6000) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 6000) results in [OkState()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test4_auction.test4.Test2.test2) ... []
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=20)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [ErrorState(bid 20 for item Hat is not above 30)]
*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=4000)
====================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 4000)]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [Listed('Car', 5000, 4000)]
Always() results in [Always()]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [ErrorState(item Car sold below reserve 5000)]
*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
Always() results in [Always()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

2 messages!

*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30

*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
ok
test1 (test.test5_auction_conds_on_pat.test5.Test1.test1) ... ok
test1 (test.test5_auction_conds_on_pat.test5.Test2.test1) ... ["*** error transition in Auction:\n    state Listed('Hat', 50, 30)\n    event 4 Bid(item='Hat', amount=20)\n    bid 20 for item Hat is not above 30", "*** error transition in Auction:\n    state Listed('Car', 5000, 4000)\n    event 7 Sell(item='Car')\n    item Car sold below reserve 5000"]


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test5_auction_conds_on_pat/test5.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test5_auction_conds_on_pat/test5.Auction.png
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=60)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [Listed('Hat', 50, 60)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=6000)
====================================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [Listed('Hat', 50, 60)]
Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [OkState()]
Always() results in [Always()]
Listed('Car', 5000, 6000) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 6000) results in [OkState()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test5_auction_conds_on_pat.test5.Test2.test2) ... []
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=20)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [ErrorState(bid 20 for item Hat is not above 30)]
*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=4000)
====================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 4000)]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [Listed('Car', 5000, 4000)]
Always() results in [Always()]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [ErrorState(item Car sold below reserve 5000)]
*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
Always() results in [Always()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

2 messages!

*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30

*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
ok
test1 (test.test6_auction_ordered_pat.test6.Test1.test1) ... ok
test1 (test.test6_auction_ordered_pat.test6.Test2.test1) ... ["*** error transition in Auction:\n    state Listed('Hat', 50, 30)\n    event 4 Bid(item='Hat', amount=20)\n    bid 20 for item Hat is not above 30", "*** error transition in Auction:\n    state Listed('Car', 5000, 4000)\n    event 7 Sell(item='Car')\n    item Car sold below reserve 5000"]


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test6_auction_ordered_pat/test6.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test6_auction_ordered_pat/test6.Auction.png
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=60)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [Listed('Hat', 50, 60)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=6000)
====================================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [Listed('Hat', 50, 60)]
Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Listed('Hat', 50, 60)
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [OkState()]
Always() results in [Always()]
Listed('Car', 5000, 6000) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Always()
Listed('Car', 5000, 6000)

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 6000) results in [OkState()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test6_auction_ordered_pat.test6.Test2.test2) ... []
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0),  Always()]

---------------
Auction states:
Listed('Hat', 50, 0)
Always()

---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 0)]
Always() results in [Listed('Car', 5000, 0),  Always()]

---------------
Auction states:
Always()
Listed('Hat', 50, 0)
Listed('Car', 5000, 0)

---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Hat', 50, 30)
Listed('Car', 5000, 0)

---------------
==================================
Event 4 Bid(item='Hat', amount=20)
==================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Hat', 50, 30) results in [ErrorState(bid 20 for item Hat is not above 30)]
*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
Listed('Car', 5000, 0)

---------------
====================================
Event 5 Bid(item='Car', amount=4000)
====================================

###############
Monitor Auction
###############

Always() results in [Always()]
Listed('Car', 5000, 0) results in [Listed('Car', 5000, 4000)]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [Listed('Car', 5000, 4000)]
Always() results in [Always()]

---------------
Auction states:
Listed('Car', 5000, 4000)
Always()

---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [ErrorState(item Car sold below reserve 5000)]
*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
Always() results in [Always()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

2 messages!

*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    bid 20 for item Hat is not above 30

*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    item Car sold below reserve 5000
ok
test1 (test.test7_auction_slicing.test7.Test1.test1) ... ok
test1 (test.test7_auction_slicing.test7.Test2.test1) ... ["*** error transition in Auction:\n    state Listed('Hat', 50, 30)\n    event 4 Bid(item='Hat', amount=20)\n    bid 20 for item Hat is not above 30", "*** error transition in Auction:\n    state Listed('Car', 5000, 4000)\n    event 7 Sell(item='Car')\n    item Car sold below reserve 5000"]


Generating PlantUML state machines for:
/Users/khavelun/CascadeProjects/pycontract_project/test/test7_auction_slicing/test7.py:
- /Users/khavelun/CascadeProjects/pycontract_project/test/test7_auction_slicing/test7.Auction.png
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 0)
---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Always() results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 0)
index Car:
  Listed('Car', 5000, 0)
---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 30)
index Car:
  Listed('Car', 5000, 0)
---------------
==================================
Event 4 Bid(item='Hat', amount=60)
==================================

###############
Monitor Auction
###############

Listed('Hat', 50, 30) results in [Listed('Hat', 50, 60)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 60)
index Car:
  Listed('Car', 5000, 0)
---------------
====================================
Event 5 Bid(item='Car', amount=6000)
====================================

###############
Monitor Auction
###############

Listed('Car', 5000, 0) results in [Listed('Car', 5000, 6000)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 60)
index Car:
  Listed('Car', 5000, 6000)
---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############

Listed('Hat', 50, 60) results in [OkState()]

---------------
Auction states:
Always()
index Car:
  Listed('Car', 5000, 6000)
---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 6000) results in [OkState()]

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

[92m[OK] No messages![0m
ok
test2 (test.test7_auction_slicing.test7.Test2.test2) ... []
====================================
Event 1 List(item='Hat', reserve=50)
====================================

###############
Monitor Auction
###############

Always() results in [Listed('Hat', 50, 0)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 0)
---------------
======================================
Event 2 List(item='Car', reserve=5000)
======================================

###############
Monitor Auction
###############

Always() results in [Listed('Car', 5000, 0)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 0)
index Car:
  Listed('Car', 5000, 0)
---------------
==================================
Event 3 Bid(item='Hat', amount=30)
==================================

###############
Monitor Auction
###############

Listed('Hat', 50, 0) results in [Listed('Hat', 50, 30)]

---------------
Auction states:
Always()
index Hat:
  Listed('Hat', 50, 30)
index Car:
  Listed('Car', 5000, 0)
---------------
==================================
Event 4 Bid(item='Hat', amount=20)
==================================

###############
Monitor Auction
###############

Listed('Hat', 50, 30) results in [ErrorState(no transition matching event)]
*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    no transition matching event

---------------
Auction states:
Always()
index Car:
  Listed('Car', 5000, 0)
---------------
====================================
Event 5 Bid(item='Car', amount=4000)
====================================

###############
Monitor Auction
###############

Listed('Car', 5000, 0) results in [Listed('Car', 5000, 4000)]

---------------
Auction states:
Always()
index Car:
  Listed('Car', 5000, 4000)
---------------
========================
Event 6 Sell(item='Hat')
========================

###############
Monitor Auction
###############


---------------
Auction states:
Always()
index Car:
  Listed('Car', 5000, 4000)
---------------
========================
Event 7 Sell(item='Car')
========================

###############
Monitor Auction
###############

Listed('Car', 5000, 4000) results in [ErrorState(no transition matching event)]
*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    no transition matching event

---------------
Auction states:
Always()

---------------

Terminating monitoring!

+++++++++++++++++++++++++++
Terminating monitor Auction
+++++++++++++++++++++++++++


================
Analysis result:
================

2 messages!

*** error transition in Auction:
    state Listed('Hat', 50, 30)
    event 4 Bid(item='Hat', amount=20)
    no transition matching event

*** error transition in Auction:
    state Listed('Car', 5000, 4000)
    event 7 Sell(item='Car')
    no transition matching event
ok
test1 (test.test8_auction_inspect.test8.Test1.test1) ... ok
test1 (test.test9_auction_ast.test9.Test1.test1) ... ok

----------------------------------------------------------------------
Ran 47 tests in 18.278s

OK
["*** error transition in Auction:\n    state Listed('Hat', 50, 30)\n    event 4 Bid(item='Hat', amount=20)\n    no transition matching event", "*** error transition in Auction:\n    state Listed('Car', 5000, 4000)\n    event 7 Sell(item='Car')\n    no transition matching event"]
Always:
  [' List(item, reserve):']
Listed:
  [' Bid(self.item, amount) ', ' amount > self.prev_bid:']
  [' Bid(self.item, amount) ', ' amount <= self.prev_bid:']
  [' Sell(self.item) ', ' self.prev_bid > self.reserve:']
  [' Sell(self.item) ', ' self.prev_bid <= self.reserve:']
Monitor Auction:
  State Always:
    event
      List
        MatchAs(name='item')
        MatchAs(name='reserve')
  State Listed:
    event
      Bid
        MatchValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='item', ctx=Load()))
        MatchAs(name='amount')
      Bid
        MatchValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='item', ctx=Load()))
        MatchAs(name='amount')
      Sell
        MatchValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='item', ctx=Load()))
      Sell
        MatchValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='item', ctx=Load()))
